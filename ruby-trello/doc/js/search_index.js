var search_data = {"index":{"searchIndex":["addressable","array","authorization","hash","helpers","integrationtest","container","object","string","trello","action","association","associationproxy","attachment","authorization","basicauthpolicy","clock","nonce","oauthpolicy","basicdata","board","card","checkitemstate","checklist","client","configuration","coverimage","hasactions","item","label","labelname","list","member","multiassociation","notification","organization","tinternet","token","webhook","<<()","==()","===()","actions()","actions_details()","actions_payload()","activated?()","add_attachment()","add_checklist()","add_comment()","add_item()","add_label()","add_member()","all()","attachments()","attachments_details()","attachments_payload()","attributes=()","auth_policy()","auth_policy()","authorize()","authorize()","authorize()","authorize()","avatar_url()","basic?()","board()","board()","boards()","boards_details()","boards_payload()","card()","card()","card_payload()","cards_details()","cards_payload()","check_item_states()","checklists_details()","checklists_payload()","client()","client()","client()","close()","close()","close!()","close!()","closed?()","closed?()","closed?()","closed?()","configurable_attributes()","configuration()","configuration()","configure()","configure()","consumer_key()","consumer_secret()","create()","create()","create()","create()","create()","create()","create()","create_new_checklist()","credentials()","delete()","delete()","delete()","delete()","delete_checklist_item()","example_class()","execute()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find_card()","find_many()","get()","get()","has_lists?()","included()","item()","items()","json_into()","jsoned_into()","jsoned_into()","label_details()","label_name_details()","label_name_payload()","label_payload()","labels()","labels()","list()","list()","lists_details()","lists_payload()","logger()","logger=()","many()","member()","members()","members()","members()","method_missing()","move_to_board()","move_to_list()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next()","notification_details()","notification_payload()","oauth?()","oauth_token()","oauth_token_secret()","one()","organization()","organization_details()","organization_payload()","orgs_details()","orgs_payload()","parse()","parse_many()","path_name()","post()","proxy_assocation()","put()","refresh!()","register_attributes()","remove_attachment()","remove_label()","remove_member()","reset!()","save()","save()","save()","save()","save()","save()","save()","search()","set()","timestamp()","to_a()","to_ary()","token_details()","token_payload()","update!()","update!()","update!()","update!()","update!()","update!()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","user_details()","user_payload()","valid?()","webhook_payload()","webhooks_details()","webhooks_payload()","contributing","gemfile","license","readme","rakefile","gemfile.html","helpers.html","integrationtest.html","container.html","license.html","object.html","rakefile.html","string.html","trello.html","action.html","association.html","associationproxy.html","attachment.html","authorization.html","basicauthpolicy.html","clock.html","nonce.html","oauthpolicy.html","basicdata.html","board.html","card.html","checkitemstate.html","checklist.html","client.html","enteryourpublickey.html","enteryoursecret.html","configuration.html","error.html","hasactions.html","invalidaccesstoken.html","item.html","itemstate.html","label.html","labelname.html","list.html","member.html","multiassociation.html","notification.html","organization.html","recordnotfound.html","tinternet.html","token.html","created.rid","index.html","darkfish.js","jquery.js","navigation.js","search.js","search_index.js","searcher.js","action_rb.html","association_proxy_rb.html","association_rb.html","authorization_rb.html","basic_data_rb.html","board_rb.html","card_rb.html","checklist_rb.html","client_rb.html","has_actions_rb.html","item_rb.html","item_state_rb.html","list_rb.html","member_rb.html","multi_association_rb.html","net_rb.html","notification_rb.html","organization_rb.html","string_rb.html","token_rb.html","trello_rb.html","rdoc.css","table_of_contents.html","test-credentials.html","ruby-trello.gemspec"],"longSearchIndex":["addressable","array","authorization","hash","helpers","integrationtest","integrationtest::container","object","string","trello","trello::action","trello::association","trello::associationproxy","trello::attachment","trello::authorization","trello::authorization::basicauthpolicy","trello::authorization::clock","trello::authorization::nonce","trello::authorization::oauthpolicy","trello::basicdata","trello::board","trello::card","trello::checkitemstate","trello::checklist","trello::client","trello::configuration","trello::coverimage","trello::hasactions","trello::item","trello::label","trello::labelname","trello::list","trello::member","trello::multiassociation","trello::notification","trello::organization","trello::tinternet","trello::token","trello::webhook","trello::associationproxy#<<()","trello::basicdata#==()","trello::associationproxy#===()","trello::hasactions#actions()","helpers#actions_details()","helpers#actions_payload()","trello::webhook#activated?()","trello::card#add_attachment()","trello::card#add_checklist()","trello::card#add_comment()","trello::checklist#add_item()","trello::card#add_label()","trello::card#add_member()","trello::board::all()","trello::card#attachments()","helpers#attachments_details()","helpers#attachments_payload()","trello::configuration#attributes=()","trello::auth_policy()","trello::client#auth_policy()","trello::authorization::basicauthpolicy::authorize()","trello::authorization::basicauthpolicy#authorize()","trello::authorization::oauthpolicy::authorize()","trello::authorization::oauthpolicy#authorize()","trello::member#avatar_url()","trello::configuration#basic?()","trello::action#board()","trello::notification#board()","trello::organization#boards()","helpers#boards_details()","helpers#boards_payload()","trello::action#card()","trello::notification#card()","helpers#card_payload()","helpers#cards_details()","helpers#cards_payload()","trello::card#check_item_states()","helpers#checklists_details()","helpers#checklists_payload()","trello::client()","trello::basicdata::client()","trello::basicdata#client()","trello::card#close()","trello::list#close()","trello::card#close!()","trello::list#close!()","trello::board#closed?()","trello::card#closed?()","trello::checklist#closed?()","trello::list#closed?()","trello::configuration::configurable_attributes()","trello::configuration()","trello::client#configuration()","trello::configure()","trello::client#configure()","trello::authorization::oauthpolicy#consumer_key()","trello::authorization::oauthpolicy#consumer_secret()","trello::basicdata::create()","trello::board::create()","trello::card::create()","trello::checklist::create()","trello::client#create()","trello::list::create()","trello::webhook::create()","trello::card#create_new_checklist()","trello::configuration#credentials()","trello::card#delete()","trello::checklist#delete()","trello::client#delete()","trello::webhook#delete()","trello::checklist#delete_checklist_item()","object#example_class()","trello::tinternet::execute()","trello::action::find()","trello::basicdata::find()","trello::board::find()","trello::card::find()","trello::checklist::find()","trello::client#find()","trello::list::find()","trello::member::find()","trello::notification::find()","trello::organization::find()","trello::token::find()","trello::webhook::find()","trello::board#find_card()","trello::client#find_many()","integrationtest#get()","trello::client#get()","trello::board#has_lists?()","integrationtest::included()","trello::checkitemstate#item()","trello::checklist#items()","string#json_into()","array#jsoned_into()","hash#jsoned_into()","helpers#label_details()","helpers#label_name_details()","helpers#label_name_payload()","helpers#label_payload()","trello::board#labels()","trello::card#labels()","trello::action#list()","trello::notification#list()","helpers#lists_details()","helpers#lists_payload()","trello::logger()","trello::logger=()","trello::basicdata::many()","trello::notification#member()","trello::card#members()","trello::checklist#members()","trello::organization#members()","trello::associationproxy#method_missing()","trello::card#move_to_board()","trello::card#move_to_list()","object::new()","trello::association::new()","trello::associationproxy::new()","trello::authorization::basicauthpolicy::new()","trello::authorization::oauthpolicy::new()","trello::basicdata::new()","trello::client::new()","trello::configuration::new()","trello::multiassociation::new()","trello::authorization::nonce::next()","helpers#notification_details()","helpers#notification_payload()","trello::configuration#oauth?()","trello::authorization::oauthpolicy#oauth_token()","trello::authorization::oauthpolicy#oauth_token_secret()","trello::basicdata::one()","trello::notification#organization()","helpers#organization_details()","helpers#organization_payload()","helpers#orgs_details()","helpers#orgs_payload()","trello::basicdata::parse()","trello::basicdata::parse_many()","trello::basicdata::path_name()","trello::client#post()","trello::associationproxy#proxy_assocation()","trello::client#put()","trello::basicdata#refresh!()","trello::basicdata::register_attributes()","trello::card#remove_attachment()","trello::card#remove_label()","trello::card#remove_member()","trello::reset!()","trello::basicdata::save()","trello::board#save()","trello::card#save()","trello::checklist#save()","trello::list#save()","trello::member#save()","trello::webhook#save()","trello::action::search()","integrationtest::container::set()","trello::authorization::clock::timestamp()","trello::associationproxy#to_a()","trello::associationproxy#to_ary()","helpers#token_details()","helpers#token_payload()","trello::board#update!()","trello::card#update!()","trello::checklist#update!()","trello::list#update!()","trello::member#update!()","trello::webhook#update!()","trello::action#update_fields()","trello::attachment#update_fields()","trello::basicdata#update_fields()","trello::board#update_fields()","trello::card#update_fields()","trello::checkitemstate#update_fields()","trello::checklist#update_fields()","trello::item#update_fields()","trello::label#update_fields()","trello::labelname#update_fields()","trello::list#update_fields()","trello::member#update_fields()","trello::notification#update_fields()","trello::organization#update_fields()","trello::webhook#update_fields()","helpers#user_details()","helpers#user_payload()","trello::card#valid?()","helpers#webhook_payload()","helpers#webhooks_details()","helpers#webhooks_payload()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["Addressable","","Addressable.html","",""],["Array","","Array.html","",""],["Authorization","","Authorization.html","",""],["Hash","","Hash.html","",""],["Helpers","","Helpers.html","",""],["IntegrationTest","","IntegrationTest.html","",""],["IntegrationTest::Container","","IntegrationTest/Container.html","",""],["Object","","Object.html","",""],["String","","String.html","",""],["Trello","","Trello.html","","<p>Ruby wrapper around the Trello API\n<p>First, set up your key information. You can get this information by …\n"],["Trello::Action","","Trello/Action.html","","<p>Action represents some event that occurred. For instance, when a card is\ncreated.\n"],["Trello::Association","","Trello/Association.html","",""],["Trello::AssociationProxy","","Trello/AssociationProxy.html","",""],["Trello::Attachment","","Trello/Attachment.html","","<p>A file or url that is linked to a Trello card\n"],["Trello::Authorization","","Trello/Authorization.html","",""],["Trello::Authorization::BasicAuthPolicy","","Trello/Authorization/BasicAuthPolicy.html","",""],["Trello::Authorization::Clock","","Trello/Authorization/Clock.html","",""],["Trello::Authorization::Nonce","","Trello/Authorization/Nonce.html","",""],["Trello::Authorization::OAuthPolicy","","Trello/Authorization/OAuthPolicy.html","","<p>Handles the OAuth connectivity to Trello.\n<p>For 2-legged OAuth, do the following:\n\n<pre>OAuthPolicy.consumer_credential ...</pre>\n"],["Trello::BasicData","","Trello/BasicData.html","",""],["Trello::Board","","Trello/Board.html","",""],["Trello::Card","","Trello/Card.html","","<p>A Card is a container that can house checklists and comments; it resides\ninside a List.\n"],["Trello::CheckItemState","","Trello/CheckItemState.html","","<p>Represents the state of an item.\n"],["Trello::Checklist","","Trello/Checklist.html","","<p>A Checklist holds items which are like a “task” list. Checklists are linked\nto a card.\n"],["Trello::Client","","Trello/Client.html","",""],["Trello::Configuration","","Trello/Configuration.html","",""],["Trello::CoverImage","","Trello/CoverImage.html","","<p>The trello cover image\n<p>This is normally an attachment that the user (or trello) has set as the\ncover image …\n"],["Trello::HasActions","","Trello/HasActions.html","",""],["Trello::Item","","Trello/Item.html","","<p>An Item is a basic task that can be checked off and marked as completed.\n"],["Trello::Label","","Trello/Label.html","","<p>A colored Label attached to a card\n"],["Trello::LabelName","","Trello/LabelName.html","","<p>A colored Label attached to a card\n"],["Trello::List","","Trello/List.html","","<p>A List is a container which holds cards. Lists are items on a board.\n"],["Trello::Member","","Trello/Member.html","","<p>A Member is a user of the Trello service.\n"],["Trello::MultiAssociation","","Trello/MultiAssociation.html","",""],["Trello::Notification","","Trello/Notification.html","",""],["Trello::Organization","","Trello/Organization.html","","<p>Organizations are useful for linking members together.\n"],["Trello::TInternet","","Trello/TInternet.html","",""],["Trello::Token","","Trello/Token.html","",""],["Trello::Webhook","","Trello/Webhook.html","","<p>A webhook is an url called each time a specified idModel is updated\n"],["<<","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-3C-3C","(*records)",""],["==","Trello::BasicData","Trello/BasicData.html#method-i-3D-3D","(other)","<p>Two objects are equal if their <em>id</em> methods are equal.\n"],["===","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-3D-3D-3D","(other)",""],["actions","Trello::HasActions","Trello/HasActions.html#method-i-actions","(options = {})","<p>Returns a list of the actions associated with this object.\n"],["actions_details","Helpers","Helpers.html#method-i-actions_details","()",""],["actions_payload","Helpers","Helpers.html#method-i-actions_payload","()",""],["activated?","Trello::Webhook","Trello/Webhook.html#method-i-activated-3F","()","<p>Check if the webhook is activated\n"],["add_attachment","Trello::Card","Trello/Card.html#method-i-add_attachment","(attachment, name='')","<p>Add an attachment to this card\n"],["add_checklist","Trello::Card","Trello/Card.html#method-i-add_checklist","(checklist)","<p>Add a checklist to this card\n"],["add_comment","Trello::Card","Trello/Card.html#method-i-add_comment","(text)","<p>Add a comment with the supplied text.\n"],["add_item","Trello::Checklist","Trello/Checklist.html#method-i-add_item","(name, checked=false, position='bottom')","<p>Add an item to the checklist\n"],["add_label","Trello::Card","Trello/Card.html#method-i-add_label","(colour)","<p>Add a label\n"],["add_member","Trello::Card","Trello/Card.html#method-i-add_member","(member)","<p>Add a member to this card\n"],["all","Trello::Board","Trello/Board.html#method-c-all","()",""],["attachments","Trello::Card","Trello/Card.html#method-i-attachments","()","<p>Retrieve a list of attachments\n"],["attachments_details","Helpers","Helpers.html#method-i-attachments_details","()",""],["attachments_payload","Helpers","Helpers.html#method-i-attachments_payload","()",""],["attributes=","Trello::Configuration","Trello/Configuration.html#method-i-attributes-3D","(attrs = {})",""],["auth_policy","Trello","Trello.html#method-c-auth_policy","()",""],["auth_policy","Trello::Client","Trello/Client.html#method-i-auth_policy","()",""],["authorize","Trello::Authorization::BasicAuthPolicy","Trello/Authorization/BasicAuthPolicy.html#method-c-authorize","(request)",""],["authorize","Trello::Authorization::BasicAuthPolicy","Trello/Authorization/BasicAuthPolicy.html#method-i-authorize","(request)",""],["authorize","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-c-authorize","(request)",""],["authorize","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-i-authorize","(request)",""],["avatar_url","Trello::Member","Trello/Member.html#method-i-avatar_url","(options = { :size => :large })","<p>Retrieve a URL to the avatar.\n<p>Valid values for options are:\n\n<pre>:large (170x170)\n:small (30x30)</pre>\n"],["basic?","Trello::Configuration","Trello/Configuration.html#method-i-basic-3F","()",""],["board","Trello::Action","Trello/Action.html#method-i-board","()","<p>Returns the board this action occurred on.\n"],["board","Trello::Notification","Trello/Notification.html#method-i-board","()",""],["boards","Trello::Organization","Trello/Organization.html#method-i-boards","()","<p>Returns a list of boards under this organization.\n"],["boards_details","Helpers","Helpers.html#method-i-boards_details","()",""],["boards_payload","Helpers","Helpers.html#method-i-boards_payload","()",""],["card","Trello::Action","Trello/Action.html#method-i-card","()","<p>Returns the card the action occurred on.\n"],["card","Trello::Notification","Trello/Notification.html#method-i-card","()",""],["card_payload","Helpers","Helpers.html#method-i-card_payload","()",""],["cards_details","Helpers","Helpers.html#method-i-cards_details","()",""],["cards_payload","Helpers","Helpers.html#method-i-cards_payload","()",""],["check_item_states","Trello::Card","Trello/Card.html#method-i-check_item_states","()",""],["checklists_details","Helpers","Helpers.html#method-i-checklists_details","()",""],["checklists_payload","Helpers","Helpers.html#method-i-checklists_payload","()",""],["client","Trello","Trello.html#method-c-client","()",""],["client","Trello::BasicData","Trello/BasicData.html#method-c-client","()",""],["client","Trello::BasicData","Trello/BasicData.html#method-i-client","()",""],["close","Trello::Card","Trello/Card.html#method-i-close","()",""],["close","Trello::List","Trello/List.html#method-i-close","()",""],["close!","Trello::Card","Trello/Card.html#method-i-close-21","()",""],["close!","Trello::List","Trello/List.html#method-i-close-21","()",""],["closed?","Trello::Board","Trello/Board.html#method-i-closed-3F","()",""],["closed?","Trello::Card","Trello/Card.html#method-i-closed-3F","()","<p>Check if the card is not active anymore.\n"],["closed?","Trello::Checklist","Trello/Checklist.html#method-i-closed-3F","()","<p>Check if the checklist is currently active.\n"],["closed?","Trello::List","Trello/List.html#method-i-closed-3F","()","<p>Check if the list is not active anymore.\n"],["configurable_attributes","Trello::Configuration","Trello/Configuration.html#method-c-configurable_attributes","()",""],["configuration","Trello","Trello.html#method-c-configuration","()",""],["configuration","Trello::Client","Trello/Client.html#method-i-configuration","()",""],["configure","Trello","Trello.html#method-c-configure","(&block)",""],["configure","Trello::Client","Trello/Client.html#method-i-configure","()",""],["consumer_key","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-i-consumer_key","()",""],["consumer_secret","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-i-consumer_secret","()",""],["create","Trello::BasicData","Trello/BasicData.html#method-c-create","(options)",""],["create","Trello::Board","Trello/Board.html#method-c-create","(fields)",""],["create","Trello::Card","Trello/Card.html#method-c-create","(options)","<p>Create a new card and save it on Trello.\n"],["create","Trello::Checklist","Trello/Checklist.html#method-c-create","(options)",""],["create","Trello::Client","Trello/Client.html#method-i-create","(path, options)","<p>Creates resource with given options (attributes)\n<p>Examples:\n\n<pre>client.create(:member, options)\nclient.create(:board, ...</pre>\n"],["create","Trello::List","Trello/List.html#method-c-create","(options)",""],["create","Trello::Webhook","Trello/Webhook.html#method-c-create","(options)","<p>Create a new webhook and save it on Trello.\n"],["create_new_checklist","Trello::Card","Trello/Card.html#method-i-create_new_checklist","(name)","<p>create a new checklist and add it to this card\n"],["credentials","Trello::Configuration","Trello/Configuration.html#method-i-credentials","()",""],["delete","Trello::Card","Trello/Card.html#method-i-delete","()","<p>Delete this card\n"],["delete","Trello::Checklist","Trello/Checklist.html#method-i-delete","()","<p>Delete a checklist\n"],["delete","Trello::Client","Trello/Client.html#method-i-delete","(path)",""],["delete","Trello::Webhook","Trello/Webhook.html#method-i-delete","()","<p>Delete this webhook\n"],["delete_checklist_item","Trello::Checklist","Trello/Checklist.html#method-i-delete_checklist_item","(item_id)","<p>Delete a checklist item\n"],["example_class","Object","Object.html#method-i-example_class","()",""],["execute","Trello::TInternet","Trello/TInternet.html#method-c-execute","(request)",""],["find","Trello::Action","Trello/Action.html#method-c-find","(id, params = {})","<p>Locate a specific action and return a new Action object.\n"],["find","Trello::BasicData","Trello/BasicData.html#method-c-find","(id, params = {})",""],["find","Trello::Board","Trello/Board.html#method-c-find","(id, params = {})","<p>Finds a board.\n"],["find","Trello::Card","Trello/Card.html#method-c-find","(id, params = {})","<p>Find a specific card by its id.\n"],["find","Trello::Checklist","Trello/Checklist.html#method-c-find","(id, params = {})","<p>Locate a specific checklist by its id.\n"],["find","Trello::Client","Trello/Client.html#method-i-find","(path, id, params = {})","<p>Finds given resource by id\n<p>Examples:\n\n<pre>client.find(:board, &quot;board1234&quot;)\nclient.find(:member, &quot;user1234&quot;)</pre>\n"],["find","Trello::List","Trello/List.html#method-c-find","(id, params = {})","<p>Finds a specific list, given an id.\n"],["find","Trello::Member","Trello/Member.html#method-c-find","(id_or_username, params = {})","<p>Finds a user\n<p>The argument may be specified as either an <em>id</em> or a\n<em>username</em>.\n"],["find","Trello::Notification","Trello/Notification.html#method-c-find","(id, params = {})","<p>Locate a notification by its id\n"],["find","Trello::Organization","Trello/Organization.html#method-c-find","(id, params = {})","<p>Find an organization by its id.\n"],["find","Trello::Token","Trello/Token.html#method-c-find","(token, params = {webhooks: true})","<p>Finds a token\n"],["find","Trello::Webhook","Trello/Webhook.html#method-c-find","(id, params = {})","<p>Find a specific webhook by its id.\n"],["find_card","Trello::Board","Trello/Board.html#method-i-find_card","(card_id)",""],["find_many","Trello::Client","Trello/Client.html#method-i-find_many","(trello_class, path, params = {})","<p>Finds given resource by path with params\n"],["get","IntegrationTest","IntegrationTest.html#method-i-get","(uri)",""],["get","Trello::Client","Trello/Client.html#method-i-get","(path, params = {})",""],["has_lists?","Trello::Board","Trello/Board.html#method-i-has_lists-3F","()",""],["included","IntegrationTest","IntegrationTest.html#method-c-included","(klass)",""],["item","Trello::CheckItemState","Trello/CheckItemState.html#method-i-item","()","<p>Return the item this state belongs to.\n"],["items","Trello::Checklist","Trello/Checklist.html#method-i-items","()","<p>Return a list of items on the checklist.\n"],["json_into","String","String.html#method-i-json_into","(obj, encoding = 'UTF-8')","<p>Decodes some JSON text in the receiver, and marshals it into a class\nspecified in <em>obj</em>. If <em>obj</em> is not …\n"],["jsoned_into","Array","Array.html#method-i-jsoned_into","(obj)",""],["jsoned_into","Hash","Hash.html#method-i-jsoned_into","(obj)",""],["label_details","Helpers","Helpers.html#method-i-label_details","()",""],["label_name_details","Helpers","Helpers.html#method-i-label_name_details","()",""],["label_name_payload","Helpers","Helpers.html#method-i-label_name_payload","()",""],["label_payload","Helpers","Helpers.html#method-i-label_payload","()",""],["labels","Trello::Board","Trello/Board.html#method-i-labels","()",""],["labels","Trello::Card","Trello/Card.html#method-i-labels","()","<p>Retrieve a list of labels\n"],["list","Trello::Action","Trello/Action.html#method-i-list","()","<p>Returns the list the action occurred on.\n"],["list","Trello::Notification","Trello/Notification.html#method-i-list","()",""],["lists_details","Helpers","Helpers.html#method-i-lists_details","()",""],["lists_payload","Helpers","Helpers.html#method-i-lists_payload","()",""],["logger","Trello","Trello.html#method-c-logger","()",""],["logger=","Trello","Trello.html#method-c-logger-3D","(logger)",""],["many","Trello::BasicData","Trello/BasicData.html#method-c-many","(name, opts = {})",""],["member","Trello::Notification","Trello/Notification.html#method-i-member","()",""],["members","Trello::Card","Trello/Card.html#method-i-members","()","<p>Returns a list of members who are assigned to this card.\n"],["members","Trello::Checklist","Trello/Checklist.html#method-i-members","()","<p>Return a list of members active in this checklist.\n"],["members","Trello::Organization","Trello/Organization.html#method-i-members","(params = {})","<p>Returns an array of members associated with the organization.\n"],["method_missing","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-method_missing","(method, *args, &block)",""],["move_to_board","Trello::Card","Trello/Card.html#method-i-move_to_board","(new_board, new_list = nil)","<p>Move this card to the given board (and optional list on this board)\n"],["move_to_list","Trello::Card","Trello/Card.html#method-i-move_to_list","(list)","<p>Move this card to the given list\n"],["new","Object","Object.html#method-c-new","(options = {})",""],["new","Trello::Association","Trello/Association.html#method-c-new","(owner, target)",""],["new","Trello::AssociationProxy","Trello/AssociationProxy.html#method-c-new","(association)",""],["new","Trello::Authorization::BasicAuthPolicy","Trello/Authorization/BasicAuthPolicy.html#method-c-new","(attrs = {})",""],["new","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-c-new","(attrs = {})",""],["new","Trello::BasicData","Trello/BasicData.html#method-c-new","(fields = {})",""],["new","Trello::Client","Trello/Client.html#method-c-new","(attrs = {})",""],["new","Trello::Configuration","Trello/Configuration.html#method-c-new","(attrs = {})",""],["new","Trello::MultiAssociation","Trello/MultiAssociation.html#method-c-new","(owner, target = [])",""],["next","Trello::Authorization::Nonce","Trello/Authorization/Nonce.html#method-c-next","()",""],["notification_details","Helpers","Helpers.html#method-i-notification_details","()",""],["notification_payload","Helpers","Helpers.html#method-i-notification_payload","()",""],["oauth?","Trello::Configuration","Trello/Configuration.html#method-i-oauth-3F","()",""],["oauth_token","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-i-oauth_token","()",""],["oauth_token_secret","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-i-oauth_token_secret","()",""],["one","Trello::BasicData","Trello/BasicData.html#method-c-one","(name, opts = {})",""],["organization","Trello::Notification","Trello/Notification.html#method-i-organization","()",""],["organization_details","Helpers","Helpers.html#method-i-organization_details","()",""],["organization_payload","Helpers","Helpers.html#method-i-organization_payload","()",""],["orgs_details","Helpers","Helpers.html#method-i-orgs_details","()",""],["orgs_payload","Helpers","Helpers.html#method-i-orgs_payload","()",""],["parse","Trello::BasicData","Trello/BasicData.html#method-c-parse","(response)",""],["parse_many","Trello::BasicData","Trello/BasicData.html#method-c-parse_many","(response)",""],["path_name","Trello::BasicData","Trello/BasicData.html#method-c-path_name","()",""],["post","Trello::Client","Trello/Client.html#method-i-post","(path, body = {})",""],["proxy_assocation","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-proxy_assocation","()",""],["put","Trello::Client","Trello/Client.html#method-i-put","(path, body = {})",""],["refresh!","Trello::BasicData","Trello/BasicData.html#method-i-refresh-21","()","<p>Refresh the contents of our object.\n"],["register_attributes","Trello::BasicData","Trello/BasicData.html#method-c-register_attributes","(*names)",""],["remove_attachment","Trello::Card","Trello/Card.html#method-i-remove_attachment","(attachment)","<p>Remove an attachment from this card\n"],["remove_label","Trello::Card","Trello/Card.html#method-i-remove_label","(colour)","<p>Remove a label\n"],["remove_member","Trello::Card","Trello/Card.html#method-i-remove_member","(member)","<p>Remove a member from this card\n"],["reset!","Trello","Trello.html#method-c-reset-21","()",""],["save","Trello::BasicData","Trello/BasicData.html#method-c-save","(options)",""],["save","Trello::Board","Trello/Board.html#method-i-save","()",""],["save","Trello::Card","Trello/Card.html#method-i-save","()","<p>Saves a record.\n"],["save","Trello::Checklist","Trello/Checklist.html#method-i-save","()","<p>Save a record.\n"],["save","Trello::List","Trello/List.html#method-i-save","()",""],["save","Trello::Member","Trello/Member.html#method-i-save","()",""],["save","Trello::Webhook","Trello/Webhook.html#method-i-save","()",""],["search","Trello::Action","Trello/Action.html#method-c-search","(query, opts={})",""],["set","IntegrationTest::Container","IntegrationTest/Container.html#method-c-set","(parent, name, value)",""],["timestamp","Trello::Authorization::Clock","Trello/Authorization/Clock.html#method-c-timestamp","()",""],["to_a","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-to_a","()",""],["to_ary","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-to_ary","()",""],["token_details","Helpers","Helpers.html#method-i-token_details","()",""],["token_payload","Helpers","Helpers.html#method-i-token_payload","()",""],["update!","Trello::Board","Trello/Board.html#method-i-update-21","()",""],["update!","Trello::Card","Trello/Card.html#method-i-update-21","()","<p>Update an existing record. Warning, this updates all fields using values\nalready in memory. If an external …\n"],["update!","Trello::Checklist","Trello/Checklist.html#method-i-update-21","()",""],["update!","Trello::List","Trello/List.html#method-i-update-21","()",""],["update!","Trello::Member","Trello/Member.html#method-i-update-21","()",""],["update!","Trello::Webhook","Trello/Webhook.html#method-i-update-21","()",""],["update_fields","Trello::Action","Trello/Action.html#method-i-update_fields","(fields)","<p>Update the attributes of an action\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::Attachment","Trello/Attachment.html#method-i-update_fields","(fields)","<p>Update the fields of an attachment.\n<p>Supply a hash of stringkeyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::BasicData","Trello/BasicData.html#method-i-update_fields","(fields)",""],["update_fields","Trello::Board","Trello/Board.html#method-i-update_fields","(fields)",""],["update_fields","Trello::Card","Trello/Card.html#method-i-update_fields","(fields)","<p>Update the fields of a card.\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::CheckItemState","Trello/CheckItemState.html#method-i-update_fields","(fields)","<p>Update the fields of an item state.\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::Checklist","Trello/Checklist.html#method-i-update_fields","(fields)","<p>Update the fields of a checklist.\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::Item","Trello/Item.html#method-i-update_fields","(fields)","<p>Updates the fields of an item.\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::Label","Trello/Label.html#method-i-update_fields","(fields)","<p>Update the fields of a label.\n<p>Supply a hash of stringkeyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::LabelName","Trello/LabelName.html#method-i-update_fields","(fields)","<p>Update the fields of a label.\n<p>Supply a hash of stringkeyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::List","Trello/List.html#method-i-update_fields","(fields)","<p>Updates the fields of a list.\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::Member","Trello/Member.html#method-i-update_fields","(fields)","<p>Update the fields of a member.\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::Notification","Trello/Notification.html#method-i-update_fields","(fields)",""],["update_fields","Trello::Organization","Trello/Organization.html#method-i-update_fields","(fields)","<p>Update the fields of an organization.\n<p>Supply a hash of string keyed data retrieved from the Trello API …\n"],["update_fields","Trello::Webhook","Trello/Webhook.html#method-i-update_fields","(fields)",""],["user_details","Helpers","Helpers.html#method-i-user_details","()",""],["user_payload","Helpers","Helpers.html#method-i-user_payload","()",""],["valid?","Trello::Card","Trello/Card.html#method-i-valid-3F","()","<p>Is the record valid?\n"],["webhook_payload","Helpers","Helpers.html#method-i-webhook_payload","()",""],["webhooks_details","Helpers","Helpers.html#method-i-webhooks_details","()",""],["webhooks_payload","Helpers","Helpers.html#method-i-webhooks_payload","()",""],["CONTRIBUTING","","CONTRIBUTING_md.html","","<p>To get started, &lt;a\nhref=“www.clahub.com/agreements/jeremytregunna/ruby-trello”>sign the\nContributor …\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p>if active_model_version = ENV\n\n<pre>gem &#39;activemodel&#39;, active_model_version</pre>\n"],["LICENSE","","LICENSE.html","","<p>Copyright © 2012, Jeremy Tregunna\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p>Ruby Trello API\n<p>] ]\n<p>This library implements the Trello API.\n"],["Rakefile","","Rakefile.html","","<p>require &#39;rspec/core/rake_task&#39;\n<p>RSpec::Core::RakeTask.new\n<p>task :default =&gt; [:spec]\n"],["Gemfile.html","","doc/Gemfile_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Helpers.html","","doc/Helpers_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["IntegrationTest.html","","doc/IntegrationTest_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Container.html","","doc/IntegrationTest/Container_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["LICENSE.html","","doc/LICENSE_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Object.html","","doc/Object_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Rakefile.html","","doc/Rakefile_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["String.html","","doc/String_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Trello.html","","doc/Trello_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Action.html","","doc/Trello/Action_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Association.html","","doc/Trello/Association_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["AssociationProxy.html","","doc/Trello/AssociationProxy_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Attachment.html","","doc/Trello/Attachment_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Authorization.html","","doc/Trello/Authorization_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["BasicAuthPolicy.html","","doc/Trello/Authorization/BasicAuthPolicy_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Clock.html","","doc/Trello/Authorization/Clock_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Nonce.html","","doc/Trello/Authorization/Nonce_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["OAuthPolicy.html","","doc/Trello/Authorization/OAuthPolicy_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["BasicData.html","","doc/Trello/BasicData_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Board.html","","doc/Trello/Board_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Card.html","","doc/Trello/Card_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["CheckItemState.html","","doc/Trello/CheckItemState_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Checklist.html","","doc/Trello/Checklist_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Client.html","","doc/Trello/Client_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["EnterYourPublicKey.html","","doc/Trello/Client/EnterYourPublicKey_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["EnterYourSecret.html","","doc/Trello/Client/EnterYourSecret_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["Configuration.html","","doc/Trello/Configuration_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Error.html","","doc/Trello/Error_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["HasActions.html","","doc/Trello/HasActions_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["InvalidAccessToken.html","","doc/Trello/InvalidAccessToken_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Item.html","","doc/Trello/Item_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["ItemState.html","","doc/Trello/ItemState_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Label.html","","doc/Trello/Label_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["LabelName.html","","doc/Trello/LabelName_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["List.html","","doc/Trello/List_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Member.html","","doc/Trello/Member_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["MultiAssociation.html","","doc/Trello/MultiAssociation_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Notification.html","","doc/Trello/Notification_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Organization.html","","doc/Trello/Organization_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["RecordNotFound.html","","doc/Trello/RecordNotFound_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["TInternet.html","","doc/Trello/TInternet_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["Token.html","","doc/Trello/Token_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["created.rid","","doc/created_rid.html","","<p>Mon, 25 Mar 2013 10:04:07 -0600 ./Gemfile       Wed, 06 Mar 2013 16:55:34\n-0600 ./lib/trello/action.rb …\n"],["index.html","","doc/index_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["darkfish.js","","doc/js/darkfish_js.html","","\n<pre>Darkfish Page Functions\n$Id: darkfish.js 53 2009-01-07 02:52:03Z deveiant $\n\nAuthor: Michael Granger ...</pre>\n"],["jquery.js","","doc/js/jquery_js.html","","\n<pre>!\n jQuery JavaScript Library v1.6.2\n http://jquery.com/\n\n Copyright 2011, John Resig\n Dual licensed under ...</pre>\n"],["navigation.js","","doc/js/navigation_js.html","","\n<pre>Navigation allows movement using the arrow keys through the search results.\n\nWhen using this library ...</pre>\n"],["search.js","","doc/js/search_js.html","","<p>Search = function(data, input, result) {\n\n<pre>this.data = data;\nthis.$input = $(input);\nthis.$result = $(result); ...</pre>\n"],["search_index.js","","doc/js/search_index_js.html","","<p>var search_data = {“index”:{“searchIndex”:,“longSearchIndex”:,“info”:[,[“ …\n"],["searcher.js","","doc/js/searcher_js.html","","<p>Searcher = function(data) {\n\n<pre>this.data = data;\nthis.handlers = [];</pre>\n<p>}\n"],["action_rb.html","","doc/lib/trello/action_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["association_proxy_rb.html","","doc/lib/trello/association_proxy_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["association_rb.html","","doc/lib/trello/association_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["authorization_rb.html","","doc/lib/trello/authorization_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["basic_data_rb.html","","doc/lib/trello/basic_data_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["board_rb.html","","doc/lib/trello/board_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["card_rb.html","","doc/lib/trello/card_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["checklist_rb.html","","doc/lib/trello/checklist_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["client_rb.html","","doc/lib/trello/client_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["has_actions_rb.html","","doc/lib/trello/has_actions_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["item_rb.html","","doc/lib/trello/item_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["item_state_rb.html","","doc/lib/trello/item_state_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["list_rb.html","","doc/lib/trello/list_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["member_rb.html","","doc/lib/trello/member_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["multi_association_rb.html","","doc/lib/trello/multi_association_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["net_rb.html","","doc/lib/trello/net_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["notification_rb.html","","doc/lib/trello/notification_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["organization_rb.html","","doc/lib/trello/organization_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["string_rb.html","","doc/lib/trello/string_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["token_rb.html","","doc/lib/trello/token_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["trello_rb.html","","doc/lib/trello_rb_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n\n<pre>&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["rdoc.css","","doc/rdoc_css.html","","\n<pre> &quot;Darkfish&quot; Rdoc CSS\n $Id: rdoc.css 54 2009-01-27 01:09:48Z deveiant $\n\n Author: Michael Granger &lt;ged@FaerieMUD.org&gt; ...</pre>\n"],["table_of_contents.html","","doc/table_of_contents_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["test-credentials.html","","doc/test-credentials_html.html","","<p>&lt;!DOCTYPE html&gt;\n<p>&lt;html&gt; &lt;head&gt; &lt;meta content=“text/html; charset=UTF-8” …\n"],["ruby-trello.gemspec","","ruby-trello_gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name              = %q{ruby-trello}\ns.version           = &quot;1.1.1&quot;\ns.platform ...</pre>\n"]]}}